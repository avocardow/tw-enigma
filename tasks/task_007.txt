# Task ID: 7
# Title: Develop JS class extraction with regex
# Status: pending
# Dependencies: 4
# Priority: high
# Description: Create a robust regex-based system to extract Tailwind CSS class patterns from JavaScript and JSX files, focusing on React/JSX syntax and dynamic class assignments.
# Details:
1. Detect and process JavaScript and JSX files, identifying the framework (React, Preact, Solid, etc.) where possible.
2. Implement optimized regex patterns to extract Tailwind class names from JSX className and class attributes, handling both static and dynamic assignments.
3. Parse template literals and dynamic expressions to extract Tailwind classes, including those constructed via string interpolation or conditional logic.
4. Support extraction from component props, including spread attributes and prop forwarding patterns common in JSX frameworks.
5. Handle conditional and dynamic class assignments, such as ternaries, logical expressions, and utility libraries (e.g., clsx, classnames).
6. Optimize regex and parsing logic for performance, especially with large or complex JSX files.
7. Focus exclusively on class extraction from JSX/JS filesâ€”remove generic file creation logic.

# Test Strategy:
Comprehensive unit and integration tests using real-world JSX components and patterns from multiple frameworks. Cover static, dynamic, conditional, and prop-based class assignments. Validate extraction accuracy and performance.

# Subtasks:
## 1. JSX File Detection and Framework Identification [pending]
### Dependencies: None
### Description: Implement logic to detect JavaScript and JSX files and, where possible, identify the JSX framework (React, Preact, Solid, etc.).
### Details:
Scan project files for .js, .jsx, .ts, and .tsx extensions. Analyze import statements and file content to infer the framework. Prepare files for targeted class extraction.

## 2. Regex Patterns for JSX className/class Attribute Extraction [pending]
### Dependencies: 7.1
### Description: Develop and optimize regex patterns to extract Tailwind class names from JSX className and class attributes.
### Details:
Write regex to match className and class attributes in JSX, supporting both single and double quotes, as well as backticks. Ensure patterns capture static and simple dynamic assignments.

## 3. Template Literal and Dynamic Class Parsing [pending]
### Dependencies: 7.2
### Description: Parse template literals and dynamic expressions in JSX to extract Tailwind classes, including those built with string interpolation.
### Details:
Implement logic to parse template literals (backtick strings) and extract all possible Tailwind class names, including those within embedded expressions. Handle multiline and nested template literals.

## 4. Component Prop and Spreading Pattern Extraction [pending]
### Dependencies: 7.3
### Description: Extract Tailwind classes from component props, including spread attributes and prop forwarding patterns.
### Details:
Analyze JSX props for className/class attributes passed via props or spread syntax. Extract class names from these patterns, supporting common utility libraries and custom components.

## 5. Conditional and Dynamic Class Pattern Handling [pending]
### Dependencies: 7.4
### Description: Handle extraction of Tailwind classes from conditional and dynamic assignments in JSX.
### Details:
Support extraction from ternary expressions, logical AND/OR, and utility libraries like clsx/classnames. Ensure all possible Tailwind classes are captured from dynamic patterns.

## 6. Performance Optimization for JSX Parsing [pending]
### Dependencies: 7.5
### Description: Profile and optimize the extraction logic for speed and memory efficiency, focusing on regex and parsing performance in large JSX files.
### Details:
Use profiling tools to identify bottlenecks in regex and parsing. Refactor code for efficiency and maintainability. Document performance improvements.

## 7. Comprehensive Testing with Real JSX Components [pending]
### Dependencies: None
### Description: Develop and execute a comprehensive suite of automated tests using real-world JSX components and patterns.
### Details:
Write unit and integration tests for all extraction logic, covering static, dynamic, conditional, and prop-based class assignments. Use test frameworks (e.g., Jest, Mocha) and ensure high code coverage.

