# Task ID: 11
# Title: Develop CSS generation with @apply directives
# Status: done
# Dependencies: 8, 9, 10, 20
# Priority: high
# Description: Create a system to generate CSS rules using Tailwind's @apply directive for optimized patterns.
# Details:
1. Create src/cssGeneration.js
2. Implement function to generate CSS rules
3. Use @apply directive for each optimized pattern
4. Handle single-class and multi-class patterns
5. Implement sorting for consistent output
6. Add comments for traceability

# Test Strategy:
Unit tests for various pattern inputs and generated CSS validity

# Subtasks:
## 1. Set Up File Structure and Boilerplate [done]
### Dependencies: None
### Description: Create the necessary files and directories for CSS generation, including base CSS files, configuration files, and pattern definition files.
### Details:
Establish a clear directory structure for source, generated, and test files. Initialize boilerplate code for CSS processing and ensure all dependencies are installed.

## 2. Implement CSS Rule Generation Logic [done]
### Dependencies: 11.1
### Description: Develop the core logic to generate CSS rules from pattern definitions, ensuring correct selector and property formatting.
### Details:
Map pattern definitions to CSS selectors and property-value pairs. Ensure generated rules follow best practices for specificity and formatting, including multi-line and single-line ruleblock conventions.

## 3. Integrate @apply Directive Handling [done]
### Dependencies: 11.2
### Description: Add support for the @apply directive within generated CSS, enabling utility class composition where required.
### Details:
Detect when @apply should be used based on pattern type or configuration. Insert @apply statements into the appropriate CSS rules, ensuring valid syntax and compatibility.

## 4. Handle Multiple Pattern Types [done]
### Dependencies: 11.3
### Description: Expand logic to support various pattern types (e.g., atomic, utility, component), ensuring each is processed and output correctly.
### Details:
Implement branching or modular code to process different pattern types. Validate that each type results in the correct CSS structure and usage of @apply where applicable.

## 5. Implement Sorting of CSS Rules and Declarations [done]
### Dependencies: 11.4
### Description: Sort generated CSS rules and their declarations according to best practices, such as context or specificity, to ensure maintainability and override predictability.
### Details:
Apply sorting algorithms to order rules and declarations. Follow conventions such as sorting by context in descending order and grouping related rules logically.

## 6. Add and Validate Comments in Generated CSS [done]
### Dependencies: 11.5
### Description: Insert informative comments into the generated CSS to clarify sections, rule purposes, and non-obvious logic, following formatting guidelines.
### Details:
Ensure comments are placed according to multi-line and single-line ruleblock conventions. Validate that comments enhance readability without cluttering the output.

