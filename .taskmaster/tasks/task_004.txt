# Task ID: 4
# Title: Create CLI Package Structure
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Set up the @tw-enigma/cli package with proper configuration, directory structure, and package.json setup.
# Details:
1. Create the CLI package structure:
```
packages/cli/
├── src/
├── bin/
│   └── enigma.ts
├── tests/
├── package.json
├── tsconfig.json
├── tsup.config.ts
└── README.md
```
2. Configure package.json for CLI:
```json
{
  "name": "@tw-enigma/cli",
  "version": "0.1.0",
  "description": "Command-line interface for tw-enigma CSS optimization",
  "bin": {
    "enigma": "dist/bin/enigma.js"
  },
  "files": ["dist"],
  "scripts": {
    "build": "tsup",
    "dev": "tsup --watch",
    "test": "vitest run",
    "test:watch": "vitest",
    "lint": "eslint src bin --ext .ts"
  },
  "dependencies": {
    "@tw-enigma/core": "workspace:*",
    "commander": "^11.0.0",
    "chalk": "^5.3.0"
  },
  "keywords": ["cli", "css", "optimization", "tailwind"],
  "publishConfig": {
    "access": "public"
  }
}
```
3. Create tsconfig.json for CLI that extends the base config:
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./"
  },
  "include": ["src/**/*", "bin/**/*"]
}
```
4. Create tsup.config.ts for CLI:
```ts
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['src/index.ts', 'bin/enigma.ts'],
  format: ['cjs'],
  dts: true,
  splitting: false,
  sourcemap: true,
  clean: true,
  banner: {
    js: '#!/usr/bin/env node',
  },
});
```
5. Create a basic bin/enigma.ts file as a placeholder:
```ts
#!/usr/bin/env node
import { Command } from 'commander';
import { version } from '../src';

const program = new Command();

program
  .version(version)
  .description('tw-enigma CSS optimization tool')
  .parse(process.argv);
```
6. Create a basic src/index.ts file:
```ts
export const version = '0.1.0';

// CLI utilities will be exported here
```

# Test Strategy:
1. Verify package directory structure is created correctly
2. Validate package.json configuration
3. Test build process with `pnpm --filter @tw-enigma/cli build`
4. Ensure the CLI binary is executable after building
5. Test the CLI with `node packages/cli/dist/bin/enigma.js --version`
6. Verify workspace dependency resolution between CLI and core packages

# Subtasks:
## 1. Create CLI Package Directory Structure [pending]
### Dependencies: None
### Description: Set up the initial directory structure for the CLI package, including main folders and placeholder files.
### Details:
Create the root directory for the CLI package. Inside it, create subdirectories such as 'bin' for executables and 'src' for source files. Add placeholder files like 'bin/cli.js' and 'src/cli.ts' to establish the structure.[5]

## 2. Initialize and Configure package.json [pending]
### Dependencies: 4.1
### Description: Initialize the Node.js project and configure package.json with the necessary fields for a CLI tool.
### Details:
Run 'npm init --yes' to generate package.json. Add the 'bin' field to map the CLI command to the executable file (e.g., 'bin/cli.js'). Set the 'type' field to 'module' if using ES modules. Add other relevant metadata as needed.[5]

## 3. Set Up TypeScript Configuration [pending]
### Dependencies: 4.2
### Description: Add and configure TypeScript for the CLI package.
### Details:
Install TypeScript and create a 'tsconfig.json' file. Configure it to output compiled JavaScript files to a 'dist' directory, and ensure the 'src' directory is included as the source root.

## 4. Configure Build Scripts [pending]
### Dependencies: 4.3
### Description: Add build scripts to package.json to compile TypeScript sources.
### Details:
Add a 'build' script in package.json that runs the TypeScript compiler (e.g., 'tsc'). Optionally, add a 'prepublishOnly' script to ensure the CLI is built before publishing.

## 5. Add Placeholder CLI Implementation Files [pending]
### Dependencies: 4.4
### Description: Create initial CLI implementation files with basic placeholder code.
### Details:
Add minimal code to 'src/cli.ts' and 'bin/cli.js' (or their equivalents) to allow the CLI to execute and print a simple message. Ensure the bin file has the appropriate shebang line for Node.js execution.

## 6. Validate CLI Build and Execution [pending]
### Dependencies: 4.5
### Description: Test the build process and verify that the CLI can be executed successfully.
### Details:
Run the build script to compile TypeScript sources. Test the CLI by running it via 'node bin/cli.js' or by linking the package locally with 'npm link' and invoking the CLI command. Confirm that the placeholder output appears as expected.

