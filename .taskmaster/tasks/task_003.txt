# Task ID: 3
# Title: Create Core Package Structure
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Set up the @tw-enigma/core package with proper configuration, directory structure, and package.json setup.
# Details:
1. Create the core package structure:
```
packages/core/
├── src/
├── tests/
├── package.json
├── tsconfig.json
├── tsup.config.ts
└── README.md
```
2. Configure package.json for core:
```json
{
  "name": "@tw-enigma/core",
  "version": "0.1.0",
  "description": "CSS optimization engine for tw-enigma",
  "main": "dist/index.js",
  "module": "dist/index.mjs",
  "types": "dist/index.d.ts",
  "files": ["dist"],
  "scripts": {
    "build": "tsup",
    "dev": "tsup --watch",
    "test": "vitest run",
    "test:watch": "vitest",
    "lint": "eslint src --ext .ts"
  },
  "keywords": ["css", "optimization", "tailwind"],
  "publishConfig": {
    "access": "public"
  }
}
```
3. Create tsconfig.json for core that extends the base config:
```json
{
  "extends": "../../tsconfig.base.json",
  "compilerOptions": {
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": ["src/**/*"]
}
```
4. Create tsup.config.ts for core:
```ts
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: ['src/index.ts'],
  format: ['cjs', 'esm'],
  dts: true,
  splitting: false,
  sourcemap: true,
  clean: true,
});
```
5. Create a basic src/index.ts file as a placeholder:
```ts
export const version = '0.1.0';

// Core optimization engine exports will go here
```

# Test Strategy:
1. Verify package directory structure is created correctly
2. Validate package.json configuration
3. Test build process with `pnpm --filter @tw-enigma/core build`
4. Ensure TypeScript compilation works with the extended config
5. Verify the placeholder exports are accessible in the built package

# Subtasks:
## 1. Create Core Package Directory Structure [pending]
### Dependencies: None
### Description: Set up the main directory for the core package, including standard subdirectories such as 'src' for source files and 'dist' for build outputs.
### Details:
Ensure the directory structure follows best practices for TypeScript projects, with clear separation between source and build files.

## 2. Configure package.json [pending]
### Dependencies: 3.1
### Description: Initialize and configure the package.json file with essential metadata, scripts, and dependencies for the core package.
### Details:
Include fields such as name, version, main, scripts (e.g., build, start), and dependencies relevant to TypeScript and the project.

## 3. Set Up TypeScript and Build Configurations [pending]
### Dependencies: 3.2
### Description: Add and configure tsconfig.json and any necessary build configuration files to enable TypeScript compilation.
### Details:
Create a tsconfig.json with appropriate compilerOptions (e.g., target, module, outDir, rootDir) and include/exclude patterns for source files. Add any additional build tools or configs if needed.

## 4. Add Placeholder Source Files [pending]
### Dependencies: 3.3
### Description: Create initial placeholder TypeScript source files in the 'src' directory to scaffold the codebase.
### Details:
Add at least one .ts file (e.g., index.ts) with minimal content to ensure the build process has input files.

## 5. Validate Build Process [pending]
### Dependencies: 3.4
### Description: Run the build process to ensure TypeScript compiles the placeholder source files successfully and outputs to the correct directory.
### Details:
Use the configured npm scripts or TypeScript CLI to build the project, verify output in the 'dist' directory, and check for errors.

