# Tailwind Enigma Core ü™Ñ

**Make your website load faster by shrinking your Tailwind CSS files.**

[![npm version](https://badge.fury.io/js/@tw-enigma/core.svg)](https://badge.fury.io/js/@tw-enigma/core)
[![Downloads](https://img.shields.io/npm/dm/@tw-enigma/core.svg)](https://npmjs.org/package/@tw-enigma/core)
[![License: MIT](https://img.shields.io/badge/License-MIT-green.svg)](https://opensource.org/licenses/MIT)

---

## What does this do? ü§î

**Simple answer:** Your Tailwind CSS file is probably huge (500KB+) but you only use 10% of it. This tool finds what you actually use and creates a tiny file instead.

**Before Tailwind Enigma:**
```
Your CSS file: 847KB üò±
Classes you actually use: ~50KB worth
```

**After Tailwind Enigma:**
```
Your CSS file: 52KB üéâ
Load time: 85% faster ‚ö°
```

## 30-Second Quick Start ‚ö°

```bash
# 1. Install it
npm install -g @tw-enigma/core

# 2. Go to your project folder
cd my-website

# 3. Run it (that's it!)
enigma css-optimize "src/**/*.{html,js,jsx,tsx}" --output="dist/optimized.css"
```

**Done!** Your optimized CSS is in `dist/optimized.css`. Replace your old CSS file with this one.

## What happens when you run it? üìã

1. **üîç Scans your files** - Looks through your HTML, JS, React files etc.
2. **üìù Makes a list** - Finds every Tailwind class you actually use
3. **‚úÇÔ∏è Cuts the fat** - Removes all the CSS you don't need
4. **üéØ Creates tiny file** - Gives you a super small CSS file
5. **üöÄ Your site loads faster** - Users are happier!

## Real Examples üí™

### Example 1: Simple Website
```bash
# Before: tailwind.css = 3.2MB
# After:  optimized.css = 45KB
# Savings: 98.6% smaller! 

enigma css-optimize "*.html" --output="styles.css"
```

### Example 2: React App
```bash
# Before: CSS bundle = 890KB  
# After:  CSS bundle = 67KB
# Savings: 92.5% smaller!

enigma css-optimize "src/**/*.{js,jsx,tsx}" --output="dist/app.css"
```

### Example 3: Next.js App
```bash
# Works with any framework!
enigma css-optimize "pages/**/*.{js,jsx,tsx}" --output="public/styles.css"
```

## Installation Options üì¶

### Option 1: Global Install (Recommended)
```bash
npm install -g @tw-enigma/core
# Then use anywhere: enigma css-optimize ...
```

### Option 2: Project Install
```bash
npm install @tw-enigma/core
# Then use: npx enigma css-optimize ...
```

### Option 3: One-time use
```bash
npx @tw-enigma/core css-optimize "src/**/*.html" --output="dist/styles.css"
```

## Common Commands üõ†Ô∏è

### Basic CSS Optimization
```bash
# Optimize HTML files
enigma css-optimize "*.html" --output="optimized.css"

# Optimize React/JS files  
enigma css-optimize "src/**/*.{js,jsx,tsx}" --output="dist/styles.css"

# Optimize everything
enigma css-optimize "src/**/*.{html,js,jsx,tsx,vue}" --output="dist/styles.css"
```

### With Extra Options
```bash
# Make it super tiny
enigma css-optimize "src/**/*.html" --output="tiny.css" --minify

# See what it's doing
enigma css-optimize "src/**/*.html" --output="styles.css" --verbose

# Test first (doesn't change anything)
enigma css-optimize "src/**/*.html" --output="styles.css" --dry-run
```

## Configuration File (Optional) ‚öôÔ∏è

Don't want to type long commands? Create `enigma.config.js`:

```javascript
export default {
  input: ["src/**/*.{html,js,jsx,tsx}"],
  output: "dist/optimized.css",
  minify: true,
  removeUnused: true
};
```

Then just run:
```bash
enigma css-optimize
```

## Does it work with my setup? ‚úÖ

**‚úÖ Frameworks:** React, Vue, Next.js, Nuxt, SvelteKit, Vite, anything  
**‚úÖ File types:** HTML, JavaScript, TypeScript, JSX, TSX, Vue  
**‚úÖ Build tools:** Webpack, Vite, Rollup, esbuild, Parcel  
**‚úÖ CSS frameworks:** Tailwind CSS (that's the point!)  
**‚úÖ Operating systems:** Windows, Mac, Linux  

## Troubleshooting üîß

### "Command not found: enigma"
```bash
# Install globally first
npm install -g @tw-enigma/core

# Or use npx
npx @tw-enigma/core css-optimize ...
```

### "No classes found"
```bash
# Make sure your file pattern is correct
enigma css-optimize "src/**/*.{html,js,jsx}" --verbose

# Check if files exist
ls src/**/*.html
```

### "File not found"
```bash
# Use quotes around file patterns
enigma css-optimize "src/**/*.html" --output="dist/styles.css"
```

### Still having issues?
1. Run with `--verbose` to see what's happening
2. Try `--dry-run` first to test
3. Check our [GitHub Issues](https://github.com/avocardow/tw-enigma/issues)

---

# Advanced Usage üöÄ

*This section is for developers who want more control and advanced features.*

## Advanced CLI Commands

### CSS Analysis and Reports
```bash
# Analyze your current CSS performance
enigma css-analyze "dist/**/*.css" --generate-report --format=html

# Check performance budgets
enigma css-analyze "dist/**/*.css" --budget-file="budgets.json"

# Generate detailed optimization recommendations
enigma css-analyze "src/**/*.css" --output="analysis-report.html"
```

### Advanced Optimization Strategies
```bash
# Chunked output for better caching
enigma css-optimize "src/**/*.{html,js}" --strategy=chunked --output="dist/css/"

# Critical CSS extraction
enigma css-optimize "src/**/*.html" --critical-css --output="dist/" 

# Component-based chunking
enigma css-optimize "src/**/*.jsx" --chunking-strategy=component --max-chunks=5
```

### Development and Watch Mode
```bash
# Watch for changes during development
enigma css-optimize "src/**/*.html" --watch --output="dist/styles.css"

# Development mode with source maps
enigma css-optimize "src/**/*.jsx" --dev-mode --source-maps --output="dist/"
```

## Advanced Configuration

### Complete Configuration File
```javascript
// enigma.config.js
export default {
  // Input patterns
  input: [
    "src/**/*.{html,js,jsx,tsx,vue}",
    "pages/**/*.{js,jsx,tsx}",
    "components/**/*.{js,jsx,tsx}"
  ],
  
  // Output configuration
  output: {
    css: "dist/styles.css",
    chunks: "dist/css/",
    critical: "dist/critical.css"
  },
  
  // Optimization settings
  optimization: {
    minify: true,
    removeUnused: true,
    removeComments: true,
    mergeDuplicates: true
  },
  
  // Chunking strategy
  chunking: {
    strategy: "component", // 'component', 'route', 'usage'
    maxChunkSize: 50 * 1024, // 50KB
    maxChunks: 10
  },
  
  // Performance budgets
  performance: {
    maxBundleSize: 100 * 1024, // 100KB
    maxCriticalCssSize: 14 * 1024, // 14KB
    warnOnBudgetExceeded: true
  },
  
  // Advanced features
  features: {
    criticalCss: true,
    sourceMaps: true,
    compressionReports: true,
    progressReporting: true
  },
  
  // Framework-specific settings
  framework: {
    type: "react", // 'react', 'vue', 'nextjs', 'nuxt'
    extractFromJsx: true,
    followImports: true
  }
};
```

### TypeScript Configuration
```typescript
// enigma.config.ts
import type { EnigmaConfig } from '@tw-enigma/core';

const config: EnigmaConfig = {
  input: ["src/**/*.{ts,tsx}"],
  output: "dist/optimized.css",
  optimization: {
    minify: true,
    removeUnused: true
  }
};

export default config;
```

## Programmatic API

### Basic Usage
```typescript
import { createEnigmaOptimizer } from '@tw-enigma/core';

const optimizer = createEnigmaOptimizer({
  input: ["src/**/*.{html,js,jsx,tsx}"],
  output: "dist/optimized.css"
});

const result = await optimizer.optimize();
console.log(`Saved ${result.sizeSavings}KB (${result.percentageReduction}% reduction)`);
```

### Advanced Usage
```typescript
import { 
  createEnigmaOptimizer,
  createCssAnalyzer,
  createFileDiscovery 
} from '@tw-enigma/core';

// File discovery
const discovery = createFileDiscovery({
  patterns: ["src/**/*.{html,js,jsx,tsx}"],
  ignore: ["node_modules", "dist"]
});

const files = await discovery.findFiles();

// CSS Analysis
const analyzer = createCssAnalyzer();
const analysis = await analyzer.analyzeFiles(files);

// Optimization
const optimizer = createEnigmaOptimizer({
  analysisData: analysis,
  optimization: {
    strategy: "aggressive",
    removeUnused: true,
    minify: true
  }
});

const result = await optimizer.optimize();
```

### React/Next.js Integration
```typescript
// next.config.js
import { createNextjsPlugin } from '@tw-enigma/core/integrations';

const withEnigma = createNextjsPlugin({
  optimization: {
    minify: true,
    removeUnused: true
  },
  development: {
    hotReload: true,
    liveAnalysis: true
  }
});

export default withEnigma({
  // Your Next.js config
});
```

### Vite Integration
```typescript
// vite.config.js
import { defineConfig } from 'vite';
import { enigmaVitePlugin } from '@tw-enigma/core/integrations';

export default defineConfig({
  plugins: [
    enigmaVitePlugin({
      input: ["src/**/*.{js,jsx,tsx}"],
      optimization: {
        minify: true,
        removeUnused: true
      }
    })
  ]
});
```

## Performance Budgets

### Budget Configuration
```json
// budgets.json
{
  "css": {
    "maxSize": "100KB",
    "warnAt": "75KB",
    "errorAt": "120KB"
  },
  "criticalCss": {
    "maxSize": "14KB",
    "warnAt": "10KB"
  },
  "chunks": {
    "maxChunks": 10,
    "maxChunkSize": "50KB"
  },
  "performance": {
    "maxLoadTime": "2s",
    "targetReduction": "80%"
  }
}
```

### CI Integration
```yaml
# .github/workflows/css-performance.yml
name: CSS Performance Check
on: [push, pull_request]

jobs:
  css-performance:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: npm install
      
      - name: Build project
        run: npm run build
      
      - name: Check CSS performance
        run: |
          npx @tw-enigma/core css-analyze "dist/**/*.css" \
            --budget-file="budgets.json" \
            --fail-on-budget-exceeded \
            --generate-report \
            --format=json
      
      - name: Upload performance report
        uses: actions/upload-artifact@v2
        with:
          name: css-performance-report
          path: css-performance-report.json
```

## Plugin System

### Creating Custom Plugins
```typescript
// plugins/my-custom-plugin.ts
import type { EnigmaPlugin } from '@tw-enigma/core';

export const myCustomPlugin: EnigmaPlugin = {
  name: 'my-custom-plugin',
  version: '1.0.0',
  
  // Hook into the optimization process
  beforeOptimization(context) {
    console.log('Starting optimization...');
  },
  
  // Transform CSS classes
  transformClasses(classes) {
    return classes.map(cls => ({
      ...cls,
      // Add custom transformations
    }));
  },
  
  // Post-process results
  afterOptimization(result) {
    console.log(`Optimization complete: ${result.sizeSavings}KB saved`);
  }
};
```

### Using Plugins
```javascript
// enigma.config.js
import { myCustomPlugin } from './plugins/my-custom-plugin.js';

export default {
  input: ["src/**/*.html"],
  output: "dist/styles.css",
  plugins: [
    myCustomPlugin,
    // Other plugins...
  ]
};
```

## Error Handling and Debugging

### Verbose Logging
```bash
# See detailed information
enigma css-optimize "src/**/*.html" --verbose

# See everything (including internal operations)
enigma css-optimize "src/**/*.html" --very-verbose

# Save logs to file
enigma css-optimize "src/**/*.html" --log-file="enigma.log" --log-format="json"
```

### Debugging Configuration
```javascript
// enigma.config.js
export default {
  input: ["src/**/*.html"],
  output: "dist/styles.css",
  
  // Debug settings
  debug: {
    enabled: true,
    logLevel: "trace",
    saveIntermediateFiles: true,
    validateResults: true
  },
  
  // Error handling
  errorHandling: {
    continueOnError: false,
    retryFailedFiles: true,
    maxRetries: 3
  }
};
```

## Enterprise Features

### Atomic Operations
All file operations are atomic with automatic rollback on failure:

```typescript
import { createAtomicFileManager } from '@tw-enigma/core';

const fileManager = createAtomicFileManager();

// All operations are automatically wrapped in transactions
const result = await fileManager.writeFile('output.css', content);
// Automatically rolls back on any error
```

### Performance Monitoring
```typescript
import { createPerformanceMonitor } from '@tw-enigma/core';

const monitor = createPerformanceMonitor();

await monitor.trackOperation('css-optimization', async () => {
  // Your optimization code
});

const metrics = monitor.getMetrics();
console.log(metrics.averageOptimizationTime);
```

### Security Features
- Input validation and sanitization
- Plugin sandboxing
- Safe file operations with validation
- Protection against path traversal attacks

## API Reference

### Main Classes

#### `EnigmaOptimizer`
```typescript
class EnigmaOptimizer {
  constructor(config: EnigmaConfig);
  optimize(): Promise<OptimizationResult>;
  analyzeOnly(): Promise<AnalysisResult>;
  generateReport(): Promise<ReportData>;
}
```

#### `CssAnalyzer`
```typescript
class CssAnalyzer {
  analyzeFiles(files: string[]): Promise<AnalysisResult>;
  generateRecommendations(): Promise<Recommendation[]>;
  calculateMetrics(): Promise<PerformanceMetrics>;
}
```

#### `FileDiscovery`
```typescript
class FileDiscovery {
  findFiles(): Promise<string[]>;
  watchFiles(): Promise<FileWatcher>;
  filterFiles(predicate: FilePredicate): Promise<string[]>;
}
```

### Type Definitions

```typescript
interface EnigmaConfig {
  input: string | string[];
  output: string | OutputConfig;
  optimization?: OptimizationConfig;
  chunking?: ChunkingConfig;
  performance?: PerformanceBudget;
  plugins?: EnigmaPlugin[];
}

interface OptimizationResult {
  originalSize: number;
  optimizedSize: number;
  sizeSavings: number;
  percentageReduction: number;
  filesProcessed: number;
  chunks: number;
  duration: number;
}
```

## Migration Guide

### From v0.x to v1.0
```bash
# Old command format
enigma --input="src/**/*.html" --output="dist/styles.css"

# New command format (v1.0+)
enigma css-optimize "src/**/*.html" --output="dist/styles.css"
```

### Breaking Changes in v1.0
1. **Command structure**: Now uses subcommands (`css-optimize`, `css-analyze`)
2. **Configuration**: New configuration schema with better TypeScript support
3. **API**: Some method names have changed for consistency

### Migration Script
```bash
# Automatic migration tool
npx @tw-enigma/core migrate --from="0.x" --to="1.0" --config="enigma.config.js"
```

---

## Contributing ü§ù

We love contributions! Here's how to get started:

1. **Fork the repository**
2. **Create a feature branch**: `git checkout -b feature/awesome-feature`
3. **Make your changes**
4. **Add tests**: Make sure everything is tested
5. **Submit a pull request**

### Development Setup
```bash
git clone https://github.com/avocardow/tw-enigma.git
cd tw-enigma/core
pnpm install
pnpm test
pnpm build
```

## Support & Community üí¨

- **üìñ Documentation**: [Full docs](https://tw-enigma.dev/docs)
- **üêõ Bug Reports**: [GitHub Issues](https://github.com/avocardow/tw-enigma/issues)
- **üí¨ Discussions**: [GitHub Discussions](https://github.com/avocardow/tw-enigma/discussions)
- **üìß Email**: support@tw-enigma.dev

## License üìÑ

MIT License - see [LICENSE](LICENSE) file for details.

---

**Made with ‚ù§Ô∏è by [Rowan Cardow](https://github.com/avocardow)**

*Tailwind Enigma Core - Making the web faster, one CSS file at a time.* ‚ö°
