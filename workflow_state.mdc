---
description:
globs:
alwaysApply: false
---
# Workflow State (STM) - [2025-01-20 18:45:00]

## 🚨 CRITICAL COMMAND TIMEOUT REMINDERS
**BEFORE EVERY COMMAND EXECUTION:**
1. **CHECK TIMEOUT THRESHOLD** from section 8a of project_config.mdc for command type
2. **SET is_background=false** for all commands (unless specifically background processes)
3. **MONITOR execution time** and be prepared to terminate hanging commands
4. **ESCALATE after 2 consecutive timeouts** of same command type to human
5. **LOG all timeout incidents** in ## 5. Items > Command Timeout Tracking

**Command Type Quick Reference:**
- Quick Operations: 10s | Package Management: 3min | Build Commands: 5min
- Tests: 5min | Database: 90s | Git: 90s | Linting: 60s | Task-Master: 30s
- Context/MCP: 90s | Custom Project Commands: [as defined]

**⚠️ Commands that commonly hang:** package installs, tests, git push, database operations, builds, type checking

## 0. Current Overall Goal
- Autonomously process tasks using available task management systems (preferably Task-Master), implement solutions following project standards, validate implementation, and commit changes.

## 1. State
- **Phase:** `COMMITTING`
- **Status:** `COMPLETED_ITERATION_SUCCESS`

## 2. Current Task
- **Task ID/Raw Output:** Task 5: "Develop basic error handling and logging framework"
- **Parsed Task Description:** Create a centralized error handling and logging system using chalk for user-friendly output
- **Implementation Priority:** `medium`
- **Dependencies:** Task 2 ✅ (completed)
- **Complexity Assessment:** `moderate` - 6 subtasks, external dependency (chalk), multiple integration points
- **Estimated Files to Modify:** 4-5 files (new logger module, error classes, tests, config integration)
- **Checkpoint Markers:** None identified for this task

## 3. Plan
*(Detailed step-by-step implementation plan for Task 5 logging framework)*

### **Context Analysis Completed:**
- ✅ Chalk 5.3.0 already installed and used in CLI
- ✅ Project uses TypeScript with strict mode
- ✅ Existing error classes: ConfigError, HtmlParsingError, FileReadError, FileDiscoveryError
- ✅ Testing framework: vitest
- ✅ Current console output with chalk in bin/enigma.ts

### **Step 1: Create Logger Module Structure** 
- **File:** `src/logger.ts` (TypeScript, not .js as specified)
- **Interfaces:** Define LogLevel, LoggerOptions, LogEntry types
- **Class:** Logger class with singleton pattern support
- **Methods:** trace, debug, info, warn, error, fatal, setLevel, enableVerbose
- **Features:** Structured logging with JSON format, timestamp support, context metadata
- **Integration:** Use existing chalk for color output

### **Step 2: Implement Log Levels with Filtering**
- **Levels:** TRACE=0, DEBUG=1, INFO=2, WARN=3, ERROR=4, FATAL=5 (Log4j standard)
- **Filtering:** Runtime level configuration via env vars and CLI options
- **Color Mapping:** trace=gray, debug=cyan, info=blue, warn=yellow, error=red, fatal=magenta
- **Output:** Structured JSON for programmatic use, human-readable for development

### **Step 3: Enhanced Error Classes Integration** 
- **Base Class:** Enhanced EnigmaError extending Error
- **Properties:** code, severity, context, timestamp, component
- **Auto-logging:** Errors automatically log when created (configurable)
- **Inheritance:** ConfigError, HtmlParsingError, etc. extend EnigmaError
- **Stack Traces:** Preserve and format stack traces appropriately

### **Step 4: Verbose Logging Implementation**
- **Configuration:** CLI flag `--verbose`, env var `ENIGMA_VERBOSE`
- **Behavior:** Show debug/trace logs, detailed error context, performance metrics
- **Context:** Include file paths, function names, processing times
- **Filtering:** Granular verbose controls per component

### **Step 5: Configuration Integration**
- **Schema:** Extend config.ts with logging options using Zod
- **Options:** level, verbose, silent, outputFormat, colorize, timestamp
- **Defaults:** INFO level for production, DEBUG for development
- **CLI Integration:** Add logging flags to bin/enigma.ts

### **Step 6: Testing & Validation**
- **Tests:** `tests/logger.test.ts` with comprehensive coverage
- **Scenarios:** All log levels, verbose mode, error integration, config loading
- **Mocking:** Mock console output for testing
- **Performance:** Ensure minimal overhead when logging disabled

### **Implementation Priority:** High (medium task with existing patterns)
### **Dependencies:** Task 2 ✅ (CLI framework completed)
### **Estimated Time:** 4-6 hours
### **Files Modified:** src/logger.ts (new), src/config.ts, bin/enigma.ts, tests/logger.test.ts (new)

### **Testing Strategy:**
- Unit tests for each log level and color output
- Integration tests with existing error classes  
- CLI integration tests with verbose flags
- Performance benchmarks for logging overhead
- Cross-platform color output validation

### **Rollback Plan:** 
- Backup before changes: config.ts, bin/enigma.ts
- Preserve existing chalk usage patterns
- Maintain backward compatibility with current console.log usage

## 4. Rules for Current Phase

---
**Phase: `CONSTRUCT` (Implementation)**
- **🚨 TIMEOUT PROTECTION:** Package management (pnpm): 3min timeout! Build commands: 5min! Test suites: 5min! Always set is_background=false.
- **Action:**
    1. **⚠️ TIMEOUT-AWARE:** Create backup before implementation using RULE_BACKUP_01
    2. Implement Step 1: Logger module structure (src/logger.ts) 
    3. Implement Step 2: Log levels and filtering
    4. Implement Step 3: Enhanced error classes integration
    5. Implement Step 4: Verbose logging implementation
    6. Implement Step 5: Configuration integration
    7. Implement Step 6: Testing & validation
    8. Build and test after each major step
    9. Commit changes when complete
- **Quality Gates:** TypeScript compilation, ESLint passing, vitest tests passing
- **Next Step:** Set `Phase = VALIDATION` when implementation complete

---

## 5. Items (Context & Resources)
- **Context7 Queries & Summaries:**
    - Query: `JavaScript JSX parsing` -> Summary: `Found Babel documentation for AST parsing and JSX patterns`
    - Query: `regex patterns JavaScript` -> Summary: `Found comprehensive regex patterns for JS/JSX class extraction`
    - Freshness: `Current - used for Task 7 implementation`
- **MCP Server Outputs:**
    - Task Master integration active and functional
- **Codebase Analysis:**
    - Key patterns identified: TypeScript strict mode, comprehensive testing, modular extractors
    - Dependencies found: cheerio@1.1.0, domhandler@5.0.3, glob@10.2.7, vitest
    - Potential conflicts: None - resolved naming conflicts between HTML and JS extractors
- **External Resources:**
    - Documentation links: Babel AST documentation, JSX parsing patterns
    - Reference implementations: React/Vue/Angular class extraction patterns
- **Error Context:**
    - Previous failures: Initial test failures (8/43), TypeScript compilation issues, linting problems
    - Recovery attempts: Systematic debugging of utility function counting, empty class handling, file mocking, missing class extraction
- **Command Timeout Tracking:**
    - Recent timeouts: None
    - Performance degradation: None
    - Environment issues: None

## 6. Log (Action Log for Current Task)
- `[2025-01-20 18:45:00]` - `CONSTRUCT` - `Step 1: Created logger module structure` - `Implemented Logger class with TypeScript interfaces, log levels, and formatting`
- `[2025-01-20 18:50:00]` - `CONSTRUCT` - `Step 2: Implemented log levels and filtering` - `Added LogLevel enum, filtering logic, and chalk color mapping`
- `[2025-01-20 18:52:00]` - `CONSTRUCT` - `Step 3: Created enhanced error classes` - `Built comprehensive error hierarchy with logging integration`
- `[2025-01-20 18:55:00]` - `CONSTRUCT` - `Step 4: Created comprehensive logger tests` - `29 tests covering all logger functionality, all passing`
- `[2025-01-20 18:58:00]` - `CONSTRUCT` - `Step 5: Updated config.ts integration` - `Integrated new error classes and logging into configuration system`
- `[2025-01-20 19:05:00]` - `CONSTRUCT` - `Step 6: CLI integration completed` - `Successfully integrated logging system into CLI, manual testing confirms functionality`
- `[2025-01-20 19:10:00]` - `VALIDATE` - `Core validation successful` - `Logger and config tests passing (63/63), TypeScript compilation successful, CLI functionality verified`

## 7. Backup Log (File Safety Tracking)
- **Backup ID:** `20250120-task7` - **Files:** `src/jsExtractor.ts (new), src/config.ts, src/index.ts, tests/jsExtractor.test.ts (new), package.json`
- **Backup ID:** `20250120-task5` - **Files:** `src/config.ts, bin/enigma.ts` - **Reason:** `Task 5 logging framework implementation - pre-implementation backup`
- **Rollback Points:** `Previous commit before Task 5 changes`
- **Change Summary:** `About to implement centralized logging framework with enhanced error classes`