---
description:
globs:
alwaysApply: false
---
# Workflow State (STM) - [2025-01-20 16:52:00]

## üö® CRITICAL COMMAND TIMEOUT REMINDERS
**BEFORE EVERY COMMAND EXECUTION:**
1. **CHECK TIMEOUT THRESHOLD** from section 8a of project_config.mdc for command type
2. **SET is_background=false** for all commands (unless specifically background processes)
3. **MONITOR execution time** and be prepared to terminate hanging commands
4. **ESCALATE after 2 consecutive timeouts** of same command type to human
5. **LOG all timeout incidents** in ## 5. Items > Command Timeout Tracking

**Command Type Quick Reference:**
- Quick Operations: 10s | Package Management: 3min | Build Commands: 5min
- Tests: 5min | Database: 90s | Git: 90s | Linting: 60s | Task-Master: 30s
- Context/MCP: 90s | Custom Project Commands: [as defined]

**‚ö†Ô∏è Commands that commonly hang:** package installs, tests, git push, database operations, builds, type checking

## 0. Current Overall Goal
- Autonomously process tasks using available task management systems (preferably Task-Master), implement solutions following project standards, validate implementation, and commit changes.

## 1. State
- **Phase:** `CONSTRUCT`
- **Status:** `PLAN_APPROVED`

## 2. Current Task
- **Task ID/Raw Output:** Task 8: "Create pattern frequency map generation"
- **Parsed Task Description:** Develop a system to generate a frequency map of class patterns from extracted data
- **Implementation Priority:** `high`
- **Dependencies:** Task 6 ‚úÖ, Task 7 ‚úÖ, Task 20 ‚úÖ (all completed)
- **Complexity Assessment:** `moderate` - Data structure manipulation, frequency analysis, 6 subtasks
- **Estimated Files to Modify:** 3-4 files (new patternAnalysis module, tests, integration updates)
- **Checkpoint Markers:** None identified for this task

## 3. Plan
*(Implementation plan for Task 8: Pattern frequency map generation)*

**Overview:** Create a unified system to aggregate and analyze class frequency data from multiple extraction sources (HTML and JSX extractors), generate comprehensive frequency maps, and provide sorting/filtering capabilities for optimization decisions.

**Data Flow:** Extraction Results ‚Üí Aggregation ‚Üí Frequency Map ‚Üí Analysis ‚Üí Sorted Output

**Step 1: Create Pattern Analysis Module** 
- Create `src/patternAnalysis.ts` with TypeScript interfaces for:
  - `PatternFrequencyMap` interface (class name ‚Üí frequency data)
  - `PatternAnalysisOptions` configuration schema with Zod validation
  - `AggregatedClassData` interface combining HTML and JSX context
  - `FrequencyAnalysisResult` interface for output structure
- Implement data structure to hold aggregated class information from multiple sources
- Add metadata tracking (sources, processing time, total files analyzed)

**Step 2: Implement Data Aggregation Logic**
- Create `aggregateExtractionResults()` function to combine:
  - `HtmlClassExtractionResult[]` from HTML extractor  
  - `JsClassExtractionResult[]` from JSX extractor
- Merge class frequency counts across file types while preserving context
- Handle case sensitivity options consistently across extractors
- Implement deduplication logic for classes found in multiple files
- Track source attribution (which files/extractors contributed each class)

**Step 3: Frequency Map Generation Core**
- Implement `generateFrequencyMap()` function with:
  - Input: aggregated extraction results
  - Output: `Map<string, number>` with class ‚Üí total frequency mapping
  - Support for pattern grouping (e.g., `text-*` patterns, `bg-*` patterns)
  - Multi-class pattern detection (classes that commonly appear together)
  - Frequency threshold filtering (configurable minimum occurrence count)

**Step 4: Advanced Pattern Analysis**
- Implement `analyzePatterns()` function for:
  - Single class frequency analysis (most/least used classes)
  - Multi-class co-occurrence patterns (classes that appear together)
  - Framework-specific pattern analysis (React vs HTML usage patterns)
  - Utility class vs component-specific class categorization
  - Pattern trend analysis (emerging vs declining class usage)

**Step 5: Sorting and Filtering Implementation**
- Create `sortFrequencyMap()` function with support for:
  - Sort by frequency (ascending/descending)
  - Sort by class name (alphabetical)
  - Sort by source type (HTML-first vs JSX-first)
  - Custom sort functions via callback parameter
- Implement `filterByThreshold()` function for minimum frequency filtering
- Add `filterByPattern()` function for regex-based class pattern filtering

**Step 6: Export and Utility Functions**
- Create convenience functions for common use cases:
  - `getTopClasses(n: number)` - get N most frequent classes
  - `getBottomClasses(n: number)` - get N least frequent classes  
  - `getClassesByPattern(pattern: RegExp)` - filter by regex pattern
  - `exportToJson()` - serialize results for external use
  - `generateReport()` - human-readable frequency analysis report

**Step 7: Integration Points**
- Export main `PatternAnalyzer` class with clean API
- Integrate with existing extractors (`htmlExtractor.ts`, `jsExtractor.ts`)
- Add error handling consistent with project patterns (using existing error types)
- Implement logging integration with existing logger system
- Add performance monitoring hooks compatible with performance module

**Step 8: Comprehensive Testing**
- Unit tests for data aggregation logic (merging results from multiple extractors)
- Unit tests for frequency calculation accuracy
- Unit tests for sorting and filtering functions
- Integration tests with real HTML and JSX extraction results
- Performance tests with large datasets (1000+ classes)
- Edge case tests (empty results, duplicate classes, malformed data)

**Step 9: Documentation and Examples**
- Add JSDoc documentation for all public interfaces and functions
- Create usage examples showing integration with extractors
- Document performance characteristics and memory usage
- Add troubleshooting guide for common integration issues

**Testing Strategy:** 
- Unit tests: ~12 tests covering aggregation, frequency calculation, sorting, filtering
- Integration tests: ~4 tests with real extractor outputs
- Performance tests: ~2 tests with large datasets
- Total coverage target: >90%

**Rollback Plan:** 
- All changes isolated to new `patternAnalysis.ts` module
- No modifications to existing extractors required
- Can be safely removed without affecting existing functionality
- Git commit structure allows easy reversion of individual components

## 4. Rules for Current Phase

---
**Phase: `CONSTRUCT` (Implementation)**
- **üö® TIMEOUT PROTECTION:** Build commands have 5min timeout, tests have 5min timeout! Monitor strictly. Set is_background=false.
- **Action:**
    1. Create backup state before starting major changes
    2. Follow the approved plan in `workflow_state.mdc` (## Plan) exactly
    3. Implement code changes according to project standards in `project_config.mdc`
    4. Write complete, functional code without TODOs or placeholders unless explicitly planned
    5. Include proper imports, dependencies, and naming conventions
    6. Write relevant tests according to project testing standards
    7. Run intermediate tests/linters after logical groups of changes
    8. Check for checkpoint triggers during implementation
- **Checkpoint Triggers:**
    - After 50% Plan Completion (optional progress review)
    - Before Major Refactoring (auto-pause for confirmation)
    - External API Changes (require human approval)
    - Security-Related Changes (mandatory checkpoint)
- **Rules:**
    - Adhere strictly to the approved plan
    - If plan needs minor adjustments, document the change and reasoning
    - If major deviations needed, set `Status = AWAITING_HUMAN_INPUT`
    - Backup files before major modifications
- **Log:** Confirm completion of each plan step in `workflow_state.mdc` (## Log)
- **Next Step:** When all plan steps complete and intermediate tests pass, set `Phase = VALIDATE`

---

## 5. Items (Context & Resources)
- **Context7 Queries & Summaries:**
    - Query: `JavaScript frequency analysis algorithms` -> Summary: `Found Danfo.js with valueCounts() functionality for frequency analysis`
    - Query: `frequency analysis JavaScript patterns` -> Summary: `Danfo.js provides comprehensive data manipulation with frequency counting capabilities`
    - Freshness: `Current - gathered for Task 8 pattern analysis implementation`
- **MCP Server Outputs:**
    - Task Master: Task 8 ready for implementation with all dependencies satisfied
    - Context7: Danfo.js documentation showing frequency analysis patterns and data manipulation APIs
- **Codebase Analysis:**
    - Key patterns identified: HTML extractor returns `Map<string, ClassData>` with frequency info
    - JS/JSX extractor returns `Map<string, JsClassData>` with similar frequency structure
    - Dependencies found: Both extractors implemented and provide compatible data structures
    - Integration points: Can aggregate results from both extractors for unified frequency mapping
    - Performance infrastructure: Task 20 performance optimization components available for large dataset processing
- **External Resources:**
    - Documentation: Danfo.js frequency analysis methods (`valueCounts()`, data aggregation patterns)
    - Reference implementations: Map-based frequency counting, data structure merging patterns
- **Error Context:**
    - Previous failures: None for Task 8 planning
    - Recovery attempts: None required
- **Command Timeout Tracking:**
    - Recent timeouts: None
    - Performance degradation: None
    - Environment issues: None

## 6. Log (Action Log for Current Task)
- `[2025-01-20 16:52:00]` - `COMPLETED_ITERATION` - `Task 20 complete with performance infrastructure` - `Committed and pushed comprehensive performance optimization system`
- `[2025-01-20 16:53:00]` - `CONSTRUCT` - `Step 1 Complete: Pattern Analysis Module` - `Created src/patternAnalysis.ts with comprehensive TypeScript interfaces, Zod validation, data structures, aggregation logic, frequency map generation, advanced pattern analysis, sorting/filtering, and export utilities (650+ lines)`
- `[2025-01-20 16:58:00]` - `CONSTRUCT` - `Step 7 Complete: Comprehensive Tests` - `Created tests/patternAnalysis.test.ts with 40+ test cases covering schema validation, data aggregation, frequency map generation, pattern groups, co-occurrence analysis, framework analysis, statistics, sorting/filtering, export functions, error handling, and Tailwind pattern recognition (500+ lines)`
- `[2025-01-20 16:54:00]` - `FETCHING_TASK` - `Identified next task as Task 8` - `Pattern frequency map generation task ready for validation`
- `[2025-01-20 16:55:00]` - `TASK_VALIDATION` - `Validated Task 8 complexity and dependencies` - `Task meets all validation criteria, ready for planning`
- `[2025-01-20 16:56:00]` - `BLUEPRINT` - `Researched context with Context7 and codebase analysis` - `Found Danfo.js patterns and analyzed existing extractor data structures`
- `[2025-01-20 16:57:00]` - `BLUEPRINT` - `Created comprehensive 9-step implementation plan` - `Plan covers data aggregation, frequency mapping, analysis, testing, and integration`

## 7. Backup Log (File Safety Tracking)
- **Backup ID:** `20250120-task20` - **Files:** `src/performance/* (9 files), src/workers/batchWorker.ts, tests/performance/* (2 files)` - **Reason:** `Task 20 comprehensive performance optimization infrastructure`
- **Backup ID:** `20250120-task8-start` - **Files:** `Current state before Task 8 implementation` - **Reason:** `Task 8 pattern frequency map generation - backup before implementation`
- **Rollback Points:** `Previous commit before Task 8 changes`
- **Change Summary:** `Starting Task 8 implementation - pattern analysis module creation`

## 8. ArchiveLog
- **Task 1:** Repository Setup and infrastructure validation - [2025-01-20 14:00:00]
- **Task 2:** CLI Framework Enhancement with version/config flags - [2025-01-20 14:30:00]  
- **Task 3:** Configuration Loading System with Zod validation - [2025-01-20 15:30:00]
- **Task 4:** File Discovery with Glob - implemented comprehensive file discovery system with glob@10.2.7 - [2025-01-20 16:45:00]
- **Task 5:** Comprehensive Logging Framework - structured logging with multiple levels and error analytics - [2025-01-20 16:00:00]
- **Task 18:** Comprehensive Error Handling System - circuit breaker, error categorization, recovery strategies - [2025-01-20 16:15:00]
- **Task 20:** Performance Optimizations for Large Codebases - worker threads, caching, stream processing, memory profiling, batch coordination - [2025-01-20 16:52:00]
- **Key Learnings:** Performance optimization patterns, worker thread management, memory profiling techniques, comprehensive caching strategies

---

**Automatic Rules Applied by AI:**
- **RULE_LOG_ROTATE_01:** When ## 6. Log exceeds 5000 chars, summarize key points to ## 8. ArchiveLog and clear ## 6. Log
- **RULE_SUMMARY_01:** When `Status = COMPLETED_ITERATION_SUCCESS`, add summary to project changelog
- **RULE_BACKUP_01:** Before major file modifications in CONSTRUCT, create backup entries in ## 7. Backup Log
- **RULE_CONTEXT_REFRESH_01:** After 3 consecutive failures on same issue, refresh context using Context7 with updated queries
- **üö® RULE_TIMEOUT_PROTECTION:** **MANDATORY**: Check timeout threshold, set is_background=false, monitor execution time, log timeouts in ## 5. Items
- **RULE_TIMEOUT_RECOVERY_01:** Command exceeds defined timeout threshold ‚Üí Terminate command immediately, log timeout error with classification, apply progressive retry strategy with conservative parameters
- **RULE_CHECKPOINT_01:** Stop at checkpoints and request human approval before proceeding
- **RULE_ERROR_CLASSIFY_01:** Classify all errors using the error classification system for appropriate recovery strategies