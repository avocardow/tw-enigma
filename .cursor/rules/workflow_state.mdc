---
description: 
globs: 
alwaysApply: true
---
# Workflow State (STM) - [2025-01-20 16:45:00]

## üö® CRITICAL COMMAND TIMEOUT REMINDERS
**BEFORE EVERY COMMAND EXECUTION:**
1. **CHECK TIMEOUT THRESHOLD** from section 8a of project_config.mdc for command type
2. **SET is_background=false** for all commands (unless specifically background processes)
3. **MONITOR execution time** and be prepared to terminate hanging commands
4. **ESCALATE after 2 consecutive timeouts** of same command type to human
5. **LOG all timeout incidents** in ## 5. Items > Command Timeout Tracking

**Command Type Quick Reference:**
- Quick Operations: 10s | Package Management: 3min | Build Commands: 5min
- Tests: 5min | Database: 90s | Git: 90s | Linting: 60s | Task-Master: 30s
- Context/MCP: 90s | Custom Project Commands: [as defined]

**‚ö†Ô∏è Commands that commonly hang:** package installs, tests, git push, database operations, builds, type checking

## 0. Current Overall Goal
- Autonomously process tasks using available task management systems (preferably Task-Master), implement solutions following project standards, validate implementation, and commit changes.

## 1. State
- **Phase:** `TASK_VALIDATION`
- **Status:** `ACTIVE`

## 2. Current Task
- **Task ID/Raw Output:** Task 6: "Implement HTML class extraction using cheerio"
- **Parsed Task Description:** Develop a system to extract class patterns from HTML files using cheerio library for the Tailwind CSS optimization engine
- **Implementation Priority:** `high`
- **Dependencies:** Task 4 ‚úÖ (completed)
- **Complexity Assessment:** `complex` - External dependency integration, 6 subtasks, HTML parsing with edge cases
- **Estimated Files to Modify:** 4-5 files (new htmlExtractor module, tests, integration updates, package.json)
- **Checkpoint Markers:** None identified for this task

## 3. Plan
*(Detailed step-by-step implementation plan created during BLUEPRINT phase)*
- **Step 1:** [Detailed action description] [CHECKPOINT] (if applicable)
- **Step 2:** [Detailed action description]
- **Step 3:** [Detailed action description] [CHECKPOINT] (if applicable)
- [Continue as needed...]
- **Testing Strategy:** [Unit/Integration/E2E test plans]
- **Rollback Plan:** [How to revert changes if needed]

## 4. Rules for Current Phase

---
**Phase: `COMPLETED_ITERATION` (Enhanced Completion)**
- **üö® TIMEOUT PROTECTION:** Task-Master commands have 30s timeout! Monitor strictly. Set is_background=false.
- **Action:**
    1. **‚ö†Ô∏è TIMEOUT-AWARE:** Mark task complete using `task-master set-status --id=<taskId> --status=done` or equivalent
    2. Clear task-specific data for next iteration
    3. Archive current action log if needed (RULE_LOG_ROTATE_01)
    4. Update progress tracking and metrics
    5. Clean up temporary files and backup states
- **Log:** "Task [Task ID] completed successfully and pushed."
- **Next Step:** Set `Phase = FETCHING_TASK` to continue with next task

---

## 5. Items (Context & Resources)
- **Context7 Queries & Summaries:**
    - Query: `glob patterns Node.js` -> Summary: `Found glob@10.2.7 with comprehensive async/sync API`
    - Freshness: `Current - used for Task 4 implementation`
- **MCP Server Outputs:**
    - Task Master integration pending completion
- **Codebase Analysis:**
    - Key patterns identified: TypeScript strict mode, Zod schema validation, comprehensive testing
    - Dependencies found: glob@10.2.7, cosmiconfig@8.1.3, yargs, jest
    - Potential conflicts: None identified
- **External Resources:**
    - Documentation links: glob package documentation
    - Reference implementations: glob patterns for HTML/JS file discovery
- **Error Context:**
    - Previous failures: None for Task 4
    - Recovery attempts: None required
- **Command Timeout Tracking:**
    - Recent timeouts: None
    - Performance degradation: None
    - Environment issues: None

## 6. Log (Action Log for Current Task)
- `[2025-01-20 16:45:00]` - `COMPLETED_ITERATION` - `Marked Task 4 as complete with task-master` - `Task 4 successfully set to 'done' status`
- `[2025-01-20 16:46:00]` - `COMPLETED_ITERATION` - `Transitioned to FETCHING_TASK phase` - `Ready to fetch next task (Task 6)`

## 7. Backup Log (File Safety Tracking)
- **Backup ID:** `20250120-task4` - **Files:** `src/fileDiscovery.ts (new), src/index.ts, src/config.ts, bin/enigma.ts, tests/fileDiscovery.test.ts (new), tests/cli.test.ts, tests/config.test.ts` - **Reason:** `Task 4 file discovery implementation`
- **Rollback Points:** `Previous commit before Task 4 changes`
- **Change Summary:** `Added glob-based file discovery system with comprehensive configuration and testing`

## 8. ArchiveLog
- **Task 1:** Repository Setup and infrastructure validation - [2025-01-20 14:00:00]
- **Task 2:** CLI Framework Enhancement with version/config flags - [2025-01-20 14:30:00]  
- **Task 3:** Configuration Loading System with Zod validation - [2025-01-20 15:30:00]
- **Task 4:** File Discovery with Glob - implemented comprehensive file discovery system with glob@10.2.7 - [2025-01-20 16:45:00]
- **Task 6:** HTML Class Extraction with Cheerio - developed a system to extract class patterns from HTML files using cheerio library for the Tailwind CSS optimization engine - [2025-01-20 16:45:00]
- **Key Learnings:** TypeScript strict mode patterns, comprehensive testing strategies, schema validation best practices, external dependency integration

---

**Automatic Rules Applied by AI:**
- **RULE_LOG_ROTATE_01:** When ## 6. Log exceeds 5000 chars, summarize key points to ## 8. ArchiveLog and clear ## 6. Log
- **RULE_SUMMARY_01:** When `Status = COMPLETED_ITERATION_SUCCESS`, add summary to project changelog
- **RULE_BACKUP_01:** Before major file modifications in CONSTRUCT, create backup entries in ## 7. Backup Log
- **RULE_CONTEXT_REFRESH_01:** After 3 consecutive failures on same issue, refresh context using Context7 with updated queries
- **üö® RULE_TIMEOUT_PROTECTION:** **MANDATORY**: Check timeout threshold, set is_background=false, monitor execution time, log timeouts in ## 5. Items
- **RULE_TIMEOUT_RECOVERY_01:** Command exceeds defined timeout threshold ‚Üí Terminate command immediately, log timeout error with classification, apply progressive retry strategy with conservative parameters
- **RULE_CHECKPOINT_01:** Stop at checkpoints and request human approval before proceeding
- **RULE_ERROR_CLASSIFY_01:** Classify all errors using the error classification system for appropriate recovery strategies
